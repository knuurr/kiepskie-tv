---
description: Entire project, always
globs: 
---
Technological stack you use: 
- SvelteKit for framework
- DaisyUI and TailwindCSS for UI styling
- Heroicons (via unplugin-icons) for icons
- @ffmpeg/ffmpeg and @ffmpeg/util for local video processing
- Chart.js (via svelte-chartjs) for data visualization
- @zerodevx/svelte-toast for toast notifications with custom wrapper

For any UI elements try to use DaisyUI elements and TailwindCSS for positioning.
For any icons, use Heroicons through unplugin-icons virtual imports.
For any data visualization, use Chart.js through svelte-chartjs wrapper.
For toast notifications, use the custom Toast object from $lib/toast which provides:
- Type-safe methods (Toast.success, Toast.error, Toast.info, Toast.warning)
- Persistent toasts with Toast.custom({duration: 0})
- Consistent styling through predefined themes
- Proper cleanup with toast.pop(id) for persistent toasts

Key files:
- src/lib/toast.ts - Main toast implementation
- src/routes/+layout.svelte - Global toast container setup

Usage examples:
```ts
// Basic notifications
Toast.success('Operation completed');
Toast.error('Something went wrong');
Toast.info('Processing...');
Toast.warning('Check your input');

// Persistent loading toast
const loadingId = Toast.custom('Loading...', {
  duration: 0,
  theme: { '--toastBackground': '#94A3B8' }
});
// Later: toast.pop(loadingId);

// Loading pattern
const loadingId = Toast.custom('Loading...', { duration: 0 });
try {
  await someOperation();
  toast.pop(loadingId);
  Toast.success('Done!');
} catch (err) {
  toast.pop(loadingId);
  Toast.error('Failed: ' + err.message);
}
```

Entire website is offline-first, statically generated. Ensure any functionality is compatible with SSG.

Any reusable components should be in the `src/components` folder.
Any routes are kept in the `src/routes` folder.

ALWAYS add debug statements, code comments and error handling.